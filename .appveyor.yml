# Build SocNetV on x86 and x86_64 architectures unsing Qt/MinGW/VS2019 platforms
# https://socnetv.org
# Last Update: June 14, 2021
# Copyright (c) 2021 by Dimitris Kalamaras
#

version:  'continuous.{build}'

branches:
  # whitelist
  only:
    - master
    - develop

  # blacklist
  # Do not build tags that we create when we or travis upload to GitHub Releases
  # does not work see https://github.com/appveyor/ci/issues/1493
  except:
    - /^(?i:continuous)$/
    - /continuous/

# Do not build on tags (GitHub and BitBucket)
# skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: true


# Skipping commits affecting specific files (GitHub only).
skip_commits:
  files:
   - .travis.yml
   - .travis_before_install.sh
   - .travis_build_linux.sh
   - .travis_build_macos.sh
   - .travis_install.sh
   - socnetv.spec


# Including commits with particular message or from specific user
only_commits:
  #message: /build/                # Start a new build if message contains 'build'
  author: dimitris.kalamaras@gmail.com      # Start a new build for commit of user with email jack@company.com



#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2019

# clone directory
clone_folder: c:\projects\socnetv

matrix:
  fast_finish: true # set this flag to immediately finish build once one of the jobs fails.

# scripts that run after cloning repository
install:
  - cmd: echo %APPVEYOR_REPO_BRANCH%
  - cmd: echo %APPVEYOR_REPO_COMMIT%
  - cmd: echo %APPVEYOR_REPO_TAG%
  - cmd: echo %APPVEYOR_REPO_TAG_NAME%
  - cmd: echo "Setting last commit short id"
  - cmd: git rev-parse --short HEAD > MYVER.txt
  - cmd: set /p LAST_COMMIT_SHORT= < MYVER.txt
  - cmd: echo %LAST_COMMIT_SHORT%
  - cmd: del MYVER.txt
  - echo %APPVEYOR_REPO_COMMIT:~0,7%
  - cmd: echo "Setting SocNetV current version"
  - cmd: set SOCNETV_VERSION=3.0-dev
  - cmd: echo %SOCNETV_VERSION%
  - cmd: echo "Setting build type"
  - cmd: set BUILD_TYPE=release
  - cmd: echo %BUILD_TYPE%

  - cmd: set socnetv_continuous_build=false
  - if "%APPVEYOR_REPO_TAG%"=="true" if "%APPVEYOR_REPO_TAG_NAME%"=="continuous" set socnetv_continuous_build=true

  - cmd: echo "Setting BUILDNAME" 
  - set BUILDNAME=%SOCNETV_VERSION%-%LAST_COMMIT_SHORT%
  - cmd: echo %BUILDNAME%

  - cmd: echo "Setting Qt environment..."
  - cmd: echo "Check Qt folders (debug)..."
  - cmd: dir C:\Qt
  - cmd: dir C:\Qt\5.15
  - cmd: dir C:\Qt\5.12
  - cmd: dir C:\Qt\Tools
  - set QTDIR=C:\Qt\5.15\mingw81_64
  #- set QTDIR=C:\Qt\5.12\mingw73_64

  - cmd: echo "Check project folder..."        
  - cmd: dir C:\projects\socnetv  
  - cmd: echo "Installing Innosetup..."  
  - choco install -y InnoSetup
  - cmd: echo "Setting paths..."    
  - set PATH=%QTDIR%\bin;C:\Qt\Tools\mingw810_64\bin;%PATH%;"C:\Program Files (x86)\Inno Setup 6"

build_script:
  - cmd: echo "Running qmake..."  
  - qmake "CONFIG+=%BUILD_TYPE%" socnetv.pro
  - cmd: echo "BUILDING %BUILD_TYPE% starts here with mingw32..."
  - mingw32-make

after_build:
  - cmd: echo "check folder contents"
  - cmd: dir C:\projects\socnetv
  - cmd: dir C:\projects\socnetv\%BUILD_TYPE%

  - cmd: echo "Executing windeployqt"
  - windeployqt %BUILD_TYPE%/socnetv.exe

  - cmd: echo "check folder contents again..."
  - cmd: dir C:\projects\socnetv\%BUILD_TYPE%

  - cmd: echo "Deleting *.o and *.cpp..."  
  - cmd: del C:\projects\socnetv\%BUILD_TYPE%\*.cpp
  - cmd: del C:\projects\socnetv\%BUILD_TYPE%\*.o

  - cmd: echo "check folder contents again..."
  - cmd: dir C:\projects\socnetv\%BUILD_TYPE%

  - cmd: cp COPYING %BUILD_TYPE%/LICENSE.txt"

  - cmd: echo "Running Innosetup..."
  - cmd: echo "Available Innosetup languages:"
  - cmd: dir "C:\Program Files (x86)\Inno Setup 6\Languages"
  - iscc innosetup.iss
  - cmd: type Setup-Manifest.txt

  - cmd: dir SocNetV*.exe

  - cmd: echo "Renaming file"
  - cmd: rename SocNetV-*installer.exe SocNetV-%BUILDNAME%-windows-installer.exe
  - cmd: dir SocNetV*.exe  
  - cmd: dir

artifacts:
  - path: SocNetV-*-installer.exe


# Deploy to GitHub Releases
deploy: 
  - provider: GitHub
    tag: $(APPVEYOR_REPO_TAG_NAME)
    description: 'SocNetV windows installer $(APPVEYOR_REPO_TAG_NAME) prereleases - commit: ${APPVEYOR_REPO_COMMIT}: $(APPVEYOR_REPO_COMMIT_MESSAGE)'
    artifact: /SocNetV.*installer\.exe/
    auth_token:
      secure: owdxko+lS3nNcxIsxL4OTdfZ5UPwudTp2vtk8TlErxd0/tqAfsPGmZ8BjN5sYTTk # your encrypted token from GitHub    
    draft: false
    prerelease: true
    force_update: true
    on:
      branch: $(APPVEYOR_REPO_BRANCH)        # release on same branch
      APPVEYOR_REPO_TAG: true                # deploy on tag push only
      socnetv_continuous_build: true         # deploy only if continuous
  - provider: GitHub
    tag: $(APPVEYOR_REPO_TAG_NAME)
    description: 'SocNetV windows installer for $(APPVEYOR_REPO_TAG_NAME)'
    artifact: /SocNetV.*installer\.exe/
    auth_token:
      secure: owdxko+lS3nNcxIsxL4OTdfZ5UPwudTp2vtk8TlErxd0/tqAfsPGmZ8BjN5sYTTk # your encrypted token from GitHub
    draft: false
    prerelease: false
    force_update: true
    on:
     branch: $(APPVEYOR_REPO_BRANCH)      # release from master branch only
     APPVEYOR_REPO_TAG: true              # deploy on tag push only
     socnetv_continuous_build: false

# Notify developer on any change
notifications:
  # Email
  - provider: Email
    to:
      - dimitris.kalamaras@gmail.com
    subject: '[socnetv/app] build {{status}}'                  # optional
    on_build_status_changed: true
